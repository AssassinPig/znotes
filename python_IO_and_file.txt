python IO and file

1. read text data from file

	```
		# Read the entire file as a single string
		with open('somefile.txt', 'rt') as f:
		    data = f.read()

		# Iterate over the lines of the file
		with open('somefile.txt', 'rt') as f:
		    for line in f:
		        # process line
		        ...
	```

2. write text data into file
	```
		# Write chunks of text data
	with open('somefile.txt', 'wt') as f:
	    f.write(text1)
	    f.write(text2)
	    ...

	# Redirected print statement
	with open('somefile.txt', 'wt') as f:
	    print(line1, file=f)
	    print(line2, file=f)
	    ...
	```

3. 如果是在已存在文件中添加内容，使用模式为at 的open()函数

4. 指定編碼
	獲取編碼
	```
	sys.getdefaultencoding()
	```

5. 打開的時候設置編碼
	```
	with open('somefile.txt', 'rt', encoding='latin-1') as f:
	```

6. 换行符的识别问题
	在 Unix 和 Windows 中是不一样的(分别是 n 和 rn)。 默认情况下，Python 会以统一模式处理换行符。 这种模式下，在读取文本的时候，Python 可以识别所有的普通换行符并将其转换为单个\n 字符。 类似的，在输出时会将换行符\n转换为系统默认的换行符。 如果你不希望这种默认的处理方式，可以给open()函数传入参数newline=''
	```
	# Read with disabled newline translation
		with open('somefile.txt', 'rt', newline='') as f:
    		...
    ```

7. read and write bytes
	```
		# Read the entire file as a single byte string
		with open('somefile.bin', 'rb') as f:
		    data = f.read()

		# Write binary data to a file
		with open('somefile.bin', 'wb') as f:
		    f.write(b'Hello World')
	```

	```
		b = b'Hello world'
		b[0]
		72
	```
	output is the value of this byte

	read and binary data as string
	```
		with open('somefile.bin', 'rb') as f:
		    data = f.read(16)
		    text = data.decode('utf-8')

		with open('somefile.bin', 'wb') as f:
		    text = 'Hello World'
		    f.write(text.encode('utf-8'))
	```

8. write when file doesnot exist
	可以在 open() 函数中使用 x 模式来代替 w 模式的方法来解决这个问题
	```
	with open('somefile', 'wt') as f:
    	f.write('Hello\n')

	with open('somefile', 'xt') as f:
		f.write('Hello\n')
	```

	version 2:
	```
		import os
		if not os.path.exists('somefile'):
			with open('somefile', 'wt') as f:
				f.write('hello\n')
		else:
			print('file already exists!')

	```
9. mmap

10. wrap a fd with file
	```
		# Open a low-level file descriptor
		import os
		fd = os.open('somefile.txt', os.O_WRONLY | os.O_CREAT)

		# Turn into a proper file
		f = open(fd, 'wt')
		f.write('hello world\n')
		f.close()
	```
11. other fun to get file info
	os.path
	os.stat()

12. communicate with serial port
	```
		import serial
		ser = serial.Serial('/dev/tty.usbmodem641', # Device name varies
		                    baudrate=9600,
		                    bytesize=8,
		                    parity='N',
		                    stopbits=1)
	```