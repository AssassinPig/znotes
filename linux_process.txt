linux进程
1. 进程终止的步骤
	1. 正常终止
		调用exit
		调用_exit
		从main返回
	2. 异常终止
		调用abort
		由一个信号终止

2. 内存分布
	1. 堆	new/delete malloc/free
	2. 栈	stack 函数
	3. 全局(静态)	global
	4. 常量
	5. 代码

	高地址
		命令行参数和环境变量
		栈
		堆
		未初始化数据 由exec赋初值0

		初始化数据	 由exec从程序文件中读到
		正文
	低地址

3. 进程间的通讯方式
	1. 管道		pipe
	2. 信号中断	signal
	3. 消息队列 message queue
	4. 共享内存	shared memory
	5. 信号量 	semaphore
	6. 套接字	socket

4. 进程
	1. 是linux基本调度和管理的单位
		系统通过进程控制块来描述
		进程控制块包括了进程的描述信息 控制信息和资源信息

	2. 在linux中 进程主要标识是PID和PPID 
		其中PID是一个进程的唯一标识
		此外还有用户user, 用户组group, 进程时间和资源利用情况等

	3. 进程的状态
		执行态 	exe
			进程正在执行, 即进程正在占用CPU

		就绪态 	ready
			进程已具备执行的一切条件, 正在等待cpu分配处理时间片

		等待态	wait
			进程不能使用cpu 若等待到资源时间片到来则可唤醒

	4. 每个进程都有各自独立的地址空间
		进程控件分为3个段
		数据段	全局/静态 bss
		代码段
		堆栈段

	5. 进程执行模式划分为用户态和内核态
		当发生系统调用或中断的时候 进程模式由用户态切换至内核态 在内核态的进程 可以执行机器的特殊指令

5. 匿名管道
	1. 只能用于亲缘关系的进程之间的通讯
	2. 是一种半双工的通信模式 具有固定的读写端
	3. 管道也可以看成是一个特殊的文件 对它的读写也可以使用普通的read和write函数 但它不是普通的文件 并不属于其他任何文件系统 并且只存在于内核的内存空间中

	1. 只有在管道的读端存在时 向管道内写数据才有意义。 否则向管道内写入数据的进程将受到内核传来的SIGPIPE信号(通常为borken pipe错误)
	2. 向管道写数据时 linux将不保证写入的原子性 管道缓冲区有空闭区域 写进程就会试图向管道写入数据
	3. 父子进程在运行时 它们的先后顺序不能保证(如果想保证 则需要使用同步与互斥机制)

6. FIFO命名管道
	可以使任意进程间进行通讯
	严格按照先进先出原则 对管道FIFO及读取总是从开始处返回数据
	对他们的写则是把数据添加到末尾处 不支持lseek等操作(文件定位)
	但可以指定读写是否是阻塞进行的

7. 信号
	是在软件层次上对中断的一种模拟 
	是一种异步通讯方式

	信号可以直接进行用户空间和内核进行之间的交互 内核进程也可以利用它来通知用户空间 进程发生了哪些事件

	信号可以在任何时间发送而不需要知道该进程的状态
	如果该进程并未处于执行态 则该信号就由内核保存起来 直到该进程回复执行再传递给他为止 如果一个信号被进程设为阻塞则该信号的传递被延时 知道其阻塞被取消才能被传递给进程

	用户进程对信号的处理方式
	忽略信号 但是SIGKILL和SIGSTOP不可忽略
	捕捉信号
	执行缺省处理方式

8. 临界区
	在多任务的操作系统环境下 多个进程会同时执行 并且一个进程之间存在一些关联 多个进程为了完成一个任务可能会进行协作 这样就形成进进程间的同步关系

	在不同的进程之间 为了争夺优先的系统资源(硬件或软件资源) 会进入竞争状态 这就是进程之间的互斥关系

	进程之间的互斥同步关系存在的根源在于临界资源
	临界资源是同一个时刻只允许有限个(通常是一个) 进程可以访问或修改资源
	通常包括硬件资源(处理器 内存 存储器以及其他外围设备等)和软件资源(共享代码 共享结构 和变量等)

	为访问临界资源的代码叫做临界区 临界区本身也会成为临界资源


9. 信号量
	信号量是解决进程之间的同步和互斥为你痛的一种进程间通讯机制 包括一个称为信号量的变量和在该信号量下等待的资源

	进程等待队列 以及对心啊好量进行的两个原子操作(PV操作)
	其中对于某一种资源 取一个非负的整数值 信号量值得是当前可以用的该资源数量
	若他等于0则意味着目前没有可以用的资源

	PV操作
		P 如果有可用资源(信号量>0) 则占用一个资源(给信号量减去一, 进入临界区代码)
		如果没有可用的资源(信号量值等于0) 则被阻塞 直到系统分配资源给该进程(进入等待队列, 一直等到资源轮到该进程)
		V 如果该信号量的等待队列中存在进程等待资源 则唤醒一个阻塞进程 如果没有进程等待他 则释放是一个资源(给信号量加一)

	```
		INIT_VAL(S)
		非临界区
		P(S)
		临界区
		V(S)
		非临界区
	```

10. 共享内存
	共享内存允许两个或多个进程共享一个给定的存储器 因为数据不需要在客户机和服务器之间复制 所以这是最快的一种IPC

	使用共享内存的唯一诀窍就是多个进程之间对一个给定存储区的同步存取 若服务器将数据放入存储区 则在服务器完成这一步之前 客户机不应当取这些数据 同比场信号量被用来实现对共享存储的同步

11. zombie僵尸进程
	父进程没有wait子进程就退出 没有清理子进程所使用的资源
	当子进程终止时 会像父进程发送SIGCHLD信号
	如果没有捕获处理的话 则是缺省的操作
	如果父进程没有wait子进程而直接退出 则子进程将被托孤给init进程 内核将向init进程发送SIGCHLD先好 init进程将取得该僵尸进程的退出状态且做清理工作

12. 信号量 互斥量和条件变量之间的差异
	互斥锁必须总是给他上锁的线程解锁
