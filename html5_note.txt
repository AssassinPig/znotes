##html5
1. 语法
	1. 内容类型ContentType
		后缀名仍然是'html' 或 'htm', 内容类型仍然是'text/html'

	2. doctype不用刻意使用版本 
		``` html
		<! DOCTYPE html>
		```
	3. 指定字符编码
		```html
		<meta charset="UTF-8">
		```
2. 新增元素
	对应
	``` html
		<div class="xxxx"></div>
	```
	html5新增了很多元素，加强了web语义
	1. 常见
		section	表示页面中的一块区域
		article 表示与页面中独立的一段内容
		```
			<article>
				<header>
					<h1>apple</h1>
					<p>发表日期:<time pubdate="pubdate">2010/10/9</time></p>
				</header>
				<p><b>apple</b> 植物类水果， 多次花果</p>
				<footer>
					<p><small>著作权归...公司所有</small></p>
				</footer>
			</article>
		```

		aside	表示article元素内容之外的
		header  表示页面中的一个内容块或者整个页面的标题
		hgroup	
		footer  页面的底部
		nav		页面的导航链接部分
		figure	表示一段独立的流内容
	2. 特殊
		1. video元素
			```
			<video src='' controls='controls'>video元素</video>

			<object type='video/ogg' data="movie.ogv">
				<param name="src" value="movie.ogv">
			</object>
			```
		2. audio元素
			```
			<audio src='someaudio.wav'>audio元素</audio>

			<object type='application/ogg' data="someaudio.wav">
				<param name="src" value="omeaudio.wav">
			</object>
			```
		3. embed元素
			embed元素用来插入各种多媒体, 格式包括:midi, wav, aiff, au, mp3等
			```
				<embed src='horse.wav'></embed>
				<object data="flash.swf" type="application/x-shockwave-flash"></object>
			```
		4. mark
			主要用来呈现需要突出显示或高亮的文字, 典型应用是在搜索结果之中高亮显示搜索
			```
			<mark></mark>
			```
		5. progress
		    主要用来显示进度
		    ```html
		    <meter></meter>
		    ```
		6. time
			```
			<time></time>
			```
		7. canvas元素
			提供一块区域，用来进行绘图, 需要使用javascript来操作
			```
			<canvas id="mycanvas" width="200" height="200"></canvas>
			```
		8. command元素
			表示命令按钮， 比如单选/复选/按钮
			```
			<command onclick="cut()" label="cut">
			```
		9. details
		10. datalist
		11. datagrid
		12. keygen
		13. output
		14. source
		15. menu

	3. 新增input元素		
		1. email
		2. url
		3. number
		4. range
		5. Date Pickers
3. form新增属性
	1. form属性
		在form标签之外的标签控件，指定form的id，表示从属对应的form下
		```
			<form id="testform">
				<input type="text">
			</form>
			<textarea form="testform"></testarea>
		```
	2. formaction属性 (注意兼容性)
		一个form的一次submit操作之中，发送不同的提交请求给不同的页面
		```
		<form id='testform' action="serv.jsp">
			<input type="submit" name="s1" value="v1" formaction="s1.jsp">sumit1
			<input type="submit" name="s1" value="v1" formaction="s2.jsp">sumit2
			<input type="submit" name="s1" value="v1" formaction="s3.jsp">sumit3
			<input type="submit">
		</form>
		```
	3. placeholder属性
	4. autofocus属性
	6. list属性
		指定一个控件的属性, 以下input的内容都来自与greetings的datalist之中
		```
		<input type="text" name="greeting" list="greetings">
			<datalist id="greetings" style="display:none;">
			<option value="Good Morning">Good Morning</option>
			<option value="Hello">Hello</option>
			<option value="Good Afternoon">Good Afternoon</option>
			</datalist>
		```
	7. autocomplete属性
		自动补全
		```
		<input type="text" name="greeting" autocomplete="on" list="greetings">
		<!-- ... -->
		```
4. 文件API
	HTML4的文件file控件，一次只允许上传一个文件
	但是在HTML5之中通过添加multiple属性, 允许一次放置多个文件
	控件内每一个用户选择的文件都是一个file对象
	而FileList对象则为这些file对象列表

5. Blob对象
	原始二进制数据
	属性:
	size	表示Blob对象的字节长度
	type    表示MIME类型 如果是未知 则为空

6. canvas
	1. 取得canvas元素
		document.getElementById('canvas_id')
	2. 取得上下文context
	3. 填充与绘制边框
		fill   是指填满图形内部
		stroke 是指不填满内部只绘制图形外框
	```html
		<canvas id="canvas"></canvas>
	```
	```javascript
		function draw(id) {
			var canvas = document.getElementById(id);
			if (canvas == null)
				return false;
			console.log(canvas);
			var context = canvas.getContext('2d');
			context.fillStyle = "#EEEEFF";
			context.fillRect(0, 0, 400, 300);
			context.fillStyle = "red";
			context.strokeStyle = "blue";
			context.lineWidth = 1;
			context.fillRect(50, 50, 100, 100);
			context.strokeRect(50, 50, 100, 100);
		}

		window.onload = function() {
			draw('canvas');
		}
	```

	4. 事件
		事件是针对canvas而注册的
		以下三个分别是鼠标点下/移动/抬起的事件注册
		```
		canvas.addEventListener('mousedown', handle_fun, false);
		canvas.addEventListener('mousemove', handle_fun, false);
		canvas.addEventListener('mouseup', handle_fun, false);
		```
		因为浏览器兼容性问题，所以处理函数中的处理可能会不一样
		```
			if (ev.layerX || ev.layerX == 0) {
				var x = ev.layerX;
				var y = ev.layerY;
			} else if (ev.offsetX || ev.offsetX == 0) {
				var x = ev.offsetX;
				var y = ev.offsetY;
			}

		```

7. 绘制路径
	开始创建路径
	context.beginPath()
	创建圆形路径
	context.arc
	关闭路径
	context.closePath()
	绘制图形样式
	context.fillStyel = 'rgba(255, 0, 0, 0.25)';
	context.fill()

	moveTo	移动到某点
	lineTo	绘制到某点的直线


8. 变形绘制
	计算机平面绘图以最左上角为坐标原点(0,0), 以像素为单位坐标
	x是水平放大倍数
	y是垂直放大倍数
	可以使用context.save()和restore()来保存当前的坐标系(轴的位置和方向)

	1. 平移
		context.translate(x,y)
		参数x,y分别是x,y轴上的移动坐标
		当x,y为负数的时候是按数轴反方向移动

	2. 扩大
		context.scale(x,y)
		参数x,y分别是水平/垂直方向放大倍数
		当x,y属于[0,1]的时候是缩小倍数

	3. 旋转
		context.rotate(angle)
		使用图形上下文对象rotate方法将图形进行旋转
		angle指旋转角度
		顺时针方向旋转时候 angle为正
		逆时针方向旋转时候 angle为负

	4. 矩阵变换
		1. 原理
			当图形上下文被创建完成之后，事实上也创建了一个默认的变换矩阵
			如果不对这个变换矩阵进行修改, 那么接下来绘制的图形将以画布的最左上角为坐标原点绘制图形
			绘制出来的图形也不经过缩放,变形处理，但是如果对这个变换矩阵进行修改, 则绘制图形随之变化
			context.transform(m11, m12, m21, m22, dx, dy)
			变换矩阵如下:
				m11 m12  dx
				m12 m22  dy
				0     0   1
			其中dx,dy是移动的单位
		2. translate scale rotate都是在底层隐式修改了变换矩阵 	
			都可以使用transform方法来进行替代
			translate(x,y)可以用以下两个替换:
				context.transform(1,0,0,1,x,y)
				context.transform(0,1,1,0,x,y)
			scale(x,y)的替换
				context.transform(x,0,0,y,0,0)
				context.transform(0,y,x,0,0,0)
			rotate(angle)的替换
				context.transform(Math.cos(angle*Math.PI/180),
								Math.sin(angle*Math.PI/180),
								-Math.sin(angle*Math.PI/180),
								-Math.cos(angle*Math.PI/180), 0, 0),
				context.transform(-Math.sin(angle*Math.PI/180),
								Math.cos(angle*Math.PI/180),
								Math.cos(angle*Math.PI/180),
								Math.sin(angle*Math.PI/180), 0, 0),

		3. setTransform
			使用transform方法后，接下来绘制的图形都会按照移动后的坐标原点与新的变换矩阵相结合的方法来进行绘制，必要的时候可以使用setTransform方法将变换矩阵进行重置



9. Image对象
	1. 生成和绘制
		``` 
			var img = new Image();
			img.src = "xxx";
			ctx.drawImage(img, x, y, width, height);
		```