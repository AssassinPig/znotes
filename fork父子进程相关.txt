父子进程
子进程是父进程的副本
子进程获得父进程的数据空间，堆栈等拷贝，但是不共享这些存储部分
一般情况下，fork之后，父子进程执行的先后不能确定，取决于系统内核的调度算法，要同步的话，使用某种形式的进程间通讯

所有由父进程打开的描述符都复制到子进程之中， 父子进程每个相同描述符共享一个文件表项(应该是指inode层级)。
如果父子进程对同一fd进行写操作，如果没有任何的同步就会出现混乱
两种常见的fork函数之后的处理文件描述符的情况
1，父进程等待子进程完成，这种情况下，父进程无需对其描述符作任何处理，当子进程终止后，被他进行读写操作的任意共享描述符的文件 位移量也做了相应的更新
2，父子进程各执行不同的程序段，这种情况下， fork之后，父子进程各自关闭它们不需要使用的文件描述符，并且不干扰对方使用文件描述符，这是网络服务进行常用的

子进程集成父进程的大部分属性
实际UID GID和有效的UID ID
环境变量
附加GID
调用exec函数时关闭的标志
UID设置模式位 mask？
GID设置模式位
进程组号				*
会话ID					*	
控制终端				*
当前工作目录			*
根目录
文件创建掩码umask
文件长度限制ulimit
预定值，如优先级和任何其他的进程预定参数 根据种类不同而不同
决定是否可以继承






