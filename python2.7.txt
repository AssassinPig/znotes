string的编码转换
s.encode("utf-8")

__str__特殊方法
给一个类添加__str__方法，可以在使用print方法打印这个类实例的时候，输出相应的__str__方法返回的内容
__unicode__ 同__str__ 

常见异常和错误
AttributeError	属性错误 特性引用和赋值失败时候引发的属性错误
NameError		试图访问的变量名不存在
SyntaxError		语法错误
Exception		所有异常基类
IOError			一般常见于打不开存在文件时候
KeyError		使用了映射中弄个不存在的关键字(键)
IndexError		索引错误 使用的索引不存在或者超出序列范围
TypeError		类型错误 内建操作或是函数应用于错误的对象时引发类型错误
ZeroDivisonError 除数为零
ValueError      值错误，给对象的参数类型不正确,例如给int()函数传入了字符串类型

序列包
scoundrel = {'name':'Robin', 'girlfriend':'Marion'}
key, value = scoundrel.popitem()
key
value

布尔值
False None 0 "" () [] {}
以上都被看做是False

x is y		x和y同对象
x is not y  x和y不同对象
x in y		x在y容器之中
x not in y	x不在y容器之中

x == y		判断xy的值是否相等 包括list等
x is y		判断xy是否是一个对象

断言
if not condition:
	crash program
	
if xxx :
elif xxx:
	xxxx
else :
	xxxx
	
while xxxx:
	xxxx
	
函数function
将传入的参数当作一个元组对象
def func(*args):
    print args
func(1,2,3)
(1,2,3)

将一个列表的所有元素当作不定参数
func(*[1,2,3])
(1,2,3)

将参数作为一个字典形式传入
func(**kwargs):
    print kwargs
>>>func(a=1, b=2, c=3)
{'a':1, 'c':3, 'b':2}
>>>func(**{'a':1, 'c':3, 'b':2})
{'a':1, 'c':3, 'b':2}


数组array
words = ['this', 'is', 'a', 'array]
for w in words:
	print w

numbers = [0,1,2,3,4,5,6,7,8,9]
for n in numbers:
	print n

整数数组可以使用range直接来打印一段数字
for n in range(1,10):
	print n
	
循环遍历字典
d={}
for key in d:
	print key , d[key]
	
for key, value in d.items():
	print key , value

并行迭代
names = ['a', 'b', 'c']
ages = [1, 2, 3]
for i in range(len(names)):
	print names[i] , age[i]
	
zip(names, ages)
>>>[('a',1), ('b',2), ('c',3)]
可以针对不定长的两个数组，只出合并处理到最短长度

编号迭代
index = 0
for string in strings:
	if 'xxx' in string:
		string[index] = '[censdxxx]'
index += 1

fro index, string in enumerate(strings):
	if 'xxx' in string:
	strings[index] = '[sxdsds]'
	
排序和反转
sorted([])
reversed('xxxxx') 返回数组

continue
break

pass	什么都不做，相当于跳过

del 删除的是名称，如果x={xxx} y=x 则del a in x不会影响到y中x的值，因为删除的是名称而不是值，python会在特殊的时候删除掉这个值，即python自己进行内存管理

exec "xxxx" 执行xxxx内容的脚本
eval "xxxx" 计算xxxx内容的脚本返回的值

python import搜索目录
使用命令查看
import sys
sys.path

常用模块和类的用法
dir()方法
查询对象的属性和方法
dir([]) 查询list方法
dir('') 查询字符串
import(sys)
dir(sys)  查询模块方法

python基本类型 内置
int
bool True False
str  ''  ""
list  []
tuple ('d', 100)
dict {'name':'cc', 'country':'china'}

可变数据类型list dict
不可变数据类型int str tuple

type()函数
查看对象的类型信息
type(1) 
<type 'int'>
type('')
<type 'str'>
type(type(1))	type()的返回值也是有类型的，它是type类型
<type 'type'>	

help()函数
查看函数或者模块用途的具体说明
help('sys')
help('str')
a=[1,2,3]
help(a)
help(a.append)

global变量
x=6
def func():
	global x
	x=1
func()
print
1
可以看出在func中使用global x 可以指示要操作的x是一个全局变量

list用法
==================
l = []
len(l) 计算列表长度
min(l) 求列表中最小元素
max(l)
sum(l) 求列表中元素的和

遍历列表
for n in l:
  print n

不修改列表元素的方法 
list.index(x)
list.count(x)
修改列表元素的方法
list.append(x)
list.pop()
list.extend()

让python使用浮点计数法
from __future__ import division

python 构造函数 python析构函数 python垃圾回收
=====================================
class A():
  def __init__(self):
    pass

  def __del__(self):
    pass
垃圾回收机制
Python 采用垃圾回收机制来清理不再使用的对象；Python 提供gc模块释放
	不再使用的对象，Python 采用‘引用计数’ 的算法方式来处理回收，
	即：当某个对象在其作用域内不再被其他对象引用的时候，Python 就自动清除对象；
	Python 的函数collect()可以一次性收集所有待处理的对象(gc.collect())

build-in class attribute
__dict__ : Dictionary containing the class's namespace.
__doc__ : Class documentation string or None if undefined.
__name__: Class name.
__module__: Module name in which the class is defined. This attribute is "__main__" in interactive mode.
__bases__ : A possibly empty tuple containing the base classes, in the order of their occurrence in the base class list.

Data Hiding:
An object's attributes may or may not be visible outside the class definition. For these cases, you can name attributes with a double underscore prefix, and those attributes will not be directly visible to outsiders.

class JustCounter:
   __secretCount = 0	#private variable

   def __privateFunction(self): #private function
       pass
  
   def count(self):
      self.__secretCount += 1
      print self.__secretCount
if you want JustCounter.__sercetCount, you will get an exception.

多重继承
class Calculator:
    def calculate(self, expression):
        self.value = eval(expression)  
class Talker:
    def talk(self):
        print 'xxxx'
class TalkingCalculator(Calculator, Talker):
    pass
以上TalkingCalculator继承了Calculator也继承了Talker
如有同名函数 注意继承顺序 避免错误的重写函数 
如果Calculator中有talk的函数那么Talk中的同名函数将会被重写

with的使用
使用格式
with EXPR as VAR:
   BLOCK 
根据PEP343的解释 with...as..会被翻译成
mgr = (EXPR)
exit = type(mgr).__exit__
value = type(mgr).__enter__(mgr)
exc = True
try:
    try:
    VAR = value
    BLOCK
    except:
        exc = False
        if not exit(mgr, *sys.exc_info()):
            raise
finally:
    if exc:
        exit(mgr, None, None, None)

以下两端等价
代码段一:
with open('...') as f:
    for line in f.readlines():
        print(line)
可以保证在离开with语句的范围的时候close文件

代码段二:
f = open('...')
try:
    for line in f.readlines():
        print(line)   
finally:
    f.close() #要手动确保close操作

一般实现
class opened(object):
    def __init__(self,name):
        self.handle = open(name)
    def __enter__(self):
        return self.handle
    def __exit__(self, type, value, trackback):
        return self.handle.close()
用法同段二所示
使用contextlib来实现
from contextlib import contextmanager
@contextmanager
def opened(name):
    f = open(name)
    try:
        yield f
    finally:
        f.close()
用法同上

列表推导 List comprehensions
[i for i in range(10) if i%2 == 0]
seq = ["one", "two", "three"]
for i,element in enumerate(seq):
    seq[i] = '%d, %s' % (i, seq[i])

def _treatment(pos, element):
    return '%d: %s' % (pos, element)
[_treatment(i,el) for i,el in enumerate(seq)]
	
迭代器 Iterators 生成器generators
def psychologist():
    print 'Please tell me your problems'
    while True:
        answer = (yield)
	if answer is not None:
            if answer.endswith('?'):
		print("Don't ask yourself"
			"too much questions")
	    elif 'good' in answer:
		print "A that's good, go on"
	    elif 'bad' in answer:
		print "Don't be so negative"

gen = my_generator()
gen.next()
'something'
gen.throw(ValueError('mean mean mean'))
'deal with the exception'
gen.close()
ok let's clean
gen.next()
Traceback(...):

描述符 Descriptors 属性properties
描述符用来自定义在引用一个对象上的特性时应该完成的事情
描述符是python中复杂特性访问的基础。它们在内部使用，以实现属性，类，静态方法和super类等。
描述符类必须实现三个特护方法:
__set__在任何特性被设置的时候调用，称为setter
__get__在任何特性被读取的时候调用，成为getter
__delete__在特性上请求del时候调用

元编程
__new__ 是一个特殊方法， 一个元构造程序， 每当一个对象必须被factory类实例化的时候就讲调用它 必须返回一个类的实例 因此它可以在对象创造之前或者之后修改类
__metaclass__
元类Metaclass提供给了在类对象在内存中创建时进行交互的能力 他们的效果与__new__类似只不过在类级别上运行
代码一:
def method(self):
    return 1
klass=type('MyClass', (object,), {'method':method})
instance = klass()
instance.method()
>>>1
代码二:
class MyClass(object):
    def method(self):
	return 1

instance = MyClass()
instance.method()
>>>1
代码一和代码二是同样作用，但是代码一在动态的改变类MyClass，添加了method()函数
使用dir(instance)可以查看

__metaclass__特性必须被设置为
接受和type相同的参数(一个类名， 一组基类和一个特性映射)
返回一个类对象

元编程使用的情景:
框架级别，一个行为在许多类中是强制的行为的时候
当一个特殊行为被添加的目的不是与诸如记录日志这样的类提供功能交互的时候

装饰 Decorators
contextlib
